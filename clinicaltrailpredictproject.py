# -*- coding: utf-8 -*-
"""ClinicaltrailpredictProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k7hgRbYgwS-u7f6HXaKJx0AMl4VUnLJD
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

df = pd.read_csv("COVID clinical trials.csv")
print("Initial Shape:", df.shape)
df.head()

cols_to_drop = ['Rank', 'NCT Number', 'Title', 'Acronym', 'Other IDs',
                'First Posted', 'Last Update Posted', 'Study Documents', 'URL']
df.drop(columns=cols_to_drop, inplace=True, errors='ignore')

failure_status = ['Terminated', 'Withdrawn', 'Suspended']
df['Target'] = df['Status'].apply(lambda x: 0 if x in failure_status else 1)
df.drop(columns=['Status'], inplace=True)

df['Phases'] = df['Phases'].fillna('Unknown')
df['Gender'] = df['Gender'].fillna('Unknown')
df['Enrollment'] = df['Enrollment'].fillna(df['Enrollment'].median())

df['Start Date'] = pd.to_datetime(df['Start Date'], errors='coerce')
df['Completion Date'] = pd.to_datetime(df['Completion Date'], errors='coerce')
df['Trial Duration'] = (df['Completion Date'] - df['Start Date']).dt.days
df['Trial Duration'] = df['Trial Duration'].fillna(df['Trial Duration'].median())

text_cols = ['Conditions', 'Interventions', 'Outcome Measures']
text_data = ' '.join(df[col].dropna().astype(str).str.lower().str.cat(sep=' ') for col in text_cols)

wordcloud = WordCloud(width=1000, height=600, background_color='white', colormap='viridis').generate(text_data)
plt.figure(figsize=(12, 7))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Word Cloud: Clinical Trial Conditions, Interventions & Outcomes", fontsize=16)
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(x='Target', data=df)
plt.title("Trial Outcome Distribution (0 = Failed, 1 = Successful/Ongoing)")
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x='Target', y='Enrollment')
plt.title("Enrollment vs Trial Outcome")
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(df['Trial Duration'], bins=30)
plt.title("Distribution of Trial Durations")
plt.show()

df.drop(columns=['Conditions', 'Interventions', 'Outcome Measures', 'Sponsor/Collaborators',
                 'Study Designs', 'Locations'], inplace=True, errors='ignore')

X = df.drop(columns=['Target', 'Start Date', 'Completion Date'], errors='ignore')
y = df['Target']

X = pd.get_dummies(X, drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Failed', 'Success'], yticklabels=['Failed', 'Success'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()